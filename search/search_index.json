{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"python-dotenv python-dotenv reads key-value pairs from a .env file and can set them as environment variables. It helps in the development of applications following the 12-factor principles. Getting Started Other Use Cases Load configuration without altering the environment Parse configuration as a stream Load .env files in IPython Command-line Interface File format Multiline values Variable expansion Related Projects Acknowledgements Getting Started pip install python-dotenv If your application takes its configuration from environment variables, like a 12-factor application, launching it in development is not very practical because you have to set those environment variables yourself. To help you with that, you can add python-dotenv to your application to make it load the configuration from a .env file when it is present (e.g. in development) while remaining configurable via the environment: from dotenv import load_dotenv load_dotenv() # take environment variables # Code of your application, which uses environment variables (e.g. from `os.environ` or # `os.getenv`) as if they came from the actual environment. By default, load_dotenv doesn't override existing environment variables and looks for a .env file in same directory as python script or searches for it incrementally higher up. To configure the development environment, add a .env in the root directory of your project: . \u251c\u2500\u2500 .env \u2514\u2500\u2500 foo.py The syntax of .env files supported by python-dotenv is similar to that of Bash: # Development settings DOMAIN=example.org ADMIN_EMAIL=admin@${DOMAIN} ROOT_URL=${DOMAIN}/app If you use variables in values, ensure they are surrounded with { and } , like ${DOMAIN} , as bare variables such as $DOMAIN are not expanded. You will probably want to add .env to your .gitignore , especially if it contains secrets like a password. See the section \"File format\" below for more information about what you can write in a .env file. Other Use Cases Load configuration without altering the environment The function dotenv_values works more or less the same way as load_dotenv , except it doesn't touch the environment, it just returns a dict with the values parsed from the .env file. from dotenv import dotenv_values config = dotenv_values(\".env\") # config = {\"USER\": \"foo\", \"EMAIL\": \"foo@example.org\"} This notably enables advanced configuration management: import os from dotenv import dotenv_values config = { **dotenv_values(\".env.shared\"), # load shared development variables **dotenv_values(\".env.secret\"), # load sensitive variables **os.environ, # override loaded values with environment variables } Parse configuration as a stream load_dotenv and dotenv_values accept streams via their stream argument. It is thus possible to load the variables from sources other than the filesystem (e.g. the network). from io import StringIO from dotenv import load_dotenv config = StringIO(\"USER=foo\\nEMAIL=foo@example.org\") load_dotenv(stream=config) Load .env files in IPython You can use dotenv in IPython. By default, it will use find_dotenv to search for a .env file: %load_ext dotenv %dotenv You can also specify a path: %dotenv relative/or/absolute/path/to/.env Optional flags: -o to override existing variables. -v for increased verbosity. Command-line Interface A CLI interface dotenv is also included, which helps you manipulate the .env file without manually opening it. $ pip install \"python-dotenv[cli]\" $ dotenv set USER foo $ dotenv set EMAIL foo@example.org $ dotenv list USER=foo EMAIL=foo@example.org $ dotenv list --format=json { \"USER\": \"foo\", \"EMAIL\": \"foo@example.org\" } $ dotenv run -- python foo.py Run dotenv --help for more information about the options and subcommands. File format The format is not formally specified and still improves over time. That being said, .env files should mostly look like Bash files. Keys can be unquoted or single-quoted. Values can be unquoted, single- or double-quoted. Spaces before and after keys, equal signs, and values are ignored. Values can be followed by a comment. Lines can start with the export directive, which does not affect their interpretation. Allowed escape sequences: in single-quoted values: \\\\ , \\' in double-quoted values: \\\\ , \\' , \\\" , \\a , \\b , \\f , \\n , \\r , \\t , \\v Multiline values It is possible for single- or double-quoted values to span multiple lines. The following examples are equivalent: FOO=\"first line second line\" FOO=\"first line\\nsecond line\" Variable without a value A variable can have no value: FOO It results in dotenv_values associating that variable name with the value None (e.g. {\"FOO\": None} . load_dotenv , on the other hand, simply ignores such variables. This shouldn't be confused with FOO= , in which case the variable is associated with the empty string. Variable expansion python-dotenv can interpolate variables using POSIX variable expansion. With load_dotenv(override=True) or dotenv_values() , the value of a variable is the first of the values defined in the following list: Value of that variable in the .env file. Value of that variable in the environment. Default value, if provided. Empty string. With load_dotenv(override=False) , the value of a variable is the first of the values defined in the following list: Value of that variable in the environment. Value of that variable in the .env file. Default value, if provided. Empty string. Related Projects Honcho - For managing Procfile-based applications. django-dotenv django-environ django-environ-2 django-configuration dump-env environs dynaconf parse_it python-decouple Acknowledgements This project is currently maintained by Saurabh Kumar and Bertrand Bonnefoy-Claudet and would not have been possible without the support of these awesome people .","title":"Home"},{"location":"#python-dotenv","text":"python-dotenv reads key-value pairs from a .env file and can set them as environment variables. It helps in the development of applications following the 12-factor principles. Getting Started Other Use Cases Load configuration without altering the environment Parse configuration as a stream Load .env files in IPython Command-line Interface File format Multiline values Variable expansion Related Projects Acknowledgements","title":"python-dotenv"},{"location":"#getting-started","text":"pip install python-dotenv If your application takes its configuration from environment variables, like a 12-factor application, launching it in development is not very practical because you have to set those environment variables yourself. To help you with that, you can add python-dotenv to your application to make it load the configuration from a .env file when it is present (e.g. in development) while remaining configurable via the environment: from dotenv import load_dotenv load_dotenv() # take environment variables # Code of your application, which uses environment variables (e.g. from `os.environ` or # `os.getenv`) as if they came from the actual environment. By default, load_dotenv doesn't override existing environment variables and looks for a .env file in same directory as python script or searches for it incrementally higher up. To configure the development environment, add a .env in the root directory of your project: . \u251c\u2500\u2500 .env \u2514\u2500\u2500 foo.py The syntax of .env files supported by python-dotenv is similar to that of Bash: # Development settings DOMAIN=example.org ADMIN_EMAIL=admin@${DOMAIN} ROOT_URL=${DOMAIN}/app If you use variables in values, ensure they are surrounded with { and } , like ${DOMAIN} , as bare variables such as $DOMAIN are not expanded. You will probably want to add .env to your .gitignore , especially if it contains secrets like a password. See the section \"File format\" below for more information about what you can write in a .env file.","title":"Getting Started"},{"location":"#other-use-cases","text":"","title":"Other Use Cases"},{"location":"#load-configuration-without-altering-the-environment","text":"The function dotenv_values works more or less the same way as load_dotenv , except it doesn't touch the environment, it just returns a dict with the values parsed from the .env file. from dotenv import dotenv_values config = dotenv_values(\".env\") # config = {\"USER\": \"foo\", \"EMAIL\": \"foo@example.org\"} This notably enables advanced configuration management: import os from dotenv import dotenv_values config = { **dotenv_values(\".env.shared\"), # load shared development variables **dotenv_values(\".env.secret\"), # load sensitive variables **os.environ, # override loaded values with environment variables }","title":"Load configuration without altering the environment"},{"location":"#parse-configuration-as-a-stream","text":"load_dotenv and dotenv_values accept streams via their stream argument. It is thus possible to load the variables from sources other than the filesystem (e.g. the network). from io import StringIO from dotenv import load_dotenv config = StringIO(\"USER=foo\\nEMAIL=foo@example.org\") load_dotenv(stream=config)","title":"Parse configuration as a stream"},{"location":"#load-env-files-in-ipython","text":"You can use dotenv in IPython. By default, it will use find_dotenv to search for a .env file: %load_ext dotenv %dotenv You can also specify a path: %dotenv relative/or/absolute/path/to/.env Optional flags: -o to override existing variables. -v for increased verbosity.","title":"Load .env files in IPython"},{"location":"#command-line-interface","text":"A CLI interface dotenv is also included, which helps you manipulate the .env file without manually opening it. $ pip install \"python-dotenv[cli]\" $ dotenv set USER foo $ dotenv set EMAIL foo@example.org $ dotenv list USER=foo EMAIL=foo@example.org $ dotenv list --format=json { \"USER\": \"foo\", \"EMAIL\": \"foo@example.org\" } $ dotenv run -- python foo.py Run dotenv --help for more information about the options and subcommands.","title":"Command-line Interface"},{"location":"#file-format","text":"The format is not formally specified and still improves over time. That being said, .env files should mostly look like Bash files. Keys can be unquoted or single-quoted. Values can be unquoted, single- or double-quoted. Spaces before and after keys, equal signs, and values are ignored. Values can be followed by a comment. Lines can start with the export directive, which does not affect their interpretation. Allowed escape sequences: in single-quoted values: \\\\ , \\' in double-quoted values: \\\\ , \\' , \\\" , \\a , \\b , \\f , \\n , \\r , \\t , \\v","title":"File format"},{"location":"#multiline-values","text":"It is possible for single- or double-quoted values to span multiple lines. The following examples are equivalent: FOO=\"first line second line\" FOO=\"first line\\nsecond line\"","title":"Multiline values"},{"location":"#variable-without-a-value","text":"A variable can have no value: FOO It results in dotenv_values associating that variable name with the value None (e.g. {\"FOO\": None} . load_dotenv , on the other hand, simply ignores such variables. This shouldn't be confused with FOO= , in which case the variable is associated with the empty string.","title":"Variable without a value"},{"location":"#variable-expansion","text":"python-dotenv can interpolate variables using POSIX variable expansion. With load_dotenv(override=True) or dotenv_values() , the value of a variable is the first of the values defined in the following list: Value of that variable in the .env file. Value of that variable in the environment. Default value, if provided. Empty string. With load_dotenv(override=False) , the value of a variable is the first of the values defined in the following list: Value of that variable in the environment. Value of that variable in the .env file. Default value, if provided. Empty string.","title":"Variable expansion"},{"location":"#related-projects","text":"Honcho - For managing Procfile-based applications. django-dotenv django-environ django-environ-2 django-configuration dump-env environs dynaconf parse_it python-decouple","title":"Related Projects"},{"location":"#acknowledgements","text":"This project is currently maintained by Saurabh Kumar and Bertrand Bonnefoy-Claudet and would not have been possible without the support of these awesome people .","title":"Acknowledgements"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.1.0] - 2025-03-25 Feature - Add support for python 3.13 - Enhance dotenv run , switch to execvpe for better resource management and signal handling ( #523 ) by @eekstunt Fixed - find_dotenv and load_dotenv now correctly looks up at the current directory when running in debugger or pdb ( #553 by @randomseed42 ) Misc - Drop support for Python 3.8 1.0.1 - 2024-01-23 Fixed Gracefully handle code which has been imported from a zipfile ( #456 by @samwyma ) Allow modules using load_dotenv to be reloaded when launched in a separate thread ([#497] by @freddyaboulton ) Fix file not closed after deletion, handle error in the rewrite function ( #469 by @Qwerty-133 ) Misc * Use pathlib.Path in tests ( #466 by @eumiro ) * Fix year in release date in changelog.md ( #454 by @jankislinger ) * Use https in README links ( #474 by @Nicals ) 1.0.0 - 2023-02-24 Fixed Drop support for python 3.7, add python 3.12-dev (#449 by @theskumar ) Handle situations where the cwd does not exist. (#446 by @jctanner ) 0.21.1 - 2023-01-21 Added Use Python 3.11 non-beta in CI (#438 by @bbc2 ) Modernize variables code (#434 by @Nougat-Waffle ) Modernize main.py and parser.py code (#435 by @Nougat-Waffle ) Improve conciseness of cli.py and init .py (#439 by @Nougat-Waffle ) Improve error message for get and list commands when env file can't be opened (#441 by @bbc2 ) Updated License to align with BSD OSI template (#433 by @lsmith77 ) Fixed Fix Out-of-scope error when \"dest\" variable is undefined (#413 by @theGOTOguy ) Fix IPython test warning about deprecated magic (#440 by @bbc2 ) Fix type hint for dotenv_path var, add StrPath alias (#432 by @eaf ) 0.21.0 - 2022-09-03 Added CLI: add support for invocations via 'python -m'. (#395 by @theskumar ) load_dotenv function now returns False . (#388 by @larsks ) CLI: add --format= option to list command. (#407 by @sammck ) Fixed Drop Python 3.5 and 3.6 and upgrade GA (#393 by @eggplants ) Use open instead of io.open . (#389 by @rabinadk1 ) Improve documentation for variables without a value (#390 by @bbc2 ) Add parse_it to Related Projects (#410 by @naorlivne ) Update README.md (#415 by @harveer07 ) Improve documentation with direct use of MkDocs (#398 by @bbc2 ) 0.20.0 - 2022-03-24 Added Add encoding ( Optional[str] ) parameter to get_key , set_key and unset_key . (#379 by @bbc2 ) Fixed Use dict to specify the entry_points parameter of setuptools.setup (#376 by @mgorny ). Don't build universal wheels (#387 by @bbc2 ). 0.19.2 - 2021-11-11 Fixed In set_key , add missing newline character before new entry if necessary. (#361 by @bbc2 ) 0.19.1 - 2021-08-09 Added Add support for Python 3.10. (#359 by @theskumar ) 0.19.0 - 2021-07-24 Changed Require Python 3.5 or a later version. Python 2 and 3.4 are no longer supported. (#341 by @bbc2 ). Added The dotenv_path argument of set_key and unset_key now has a type of Union[str, os.PathLike] instead of just os.PathLike (#347 by @bbc2 ). The stream argument of load_dotenv and dotenv_values can now be a text stream ( IO[str] ), which includes values like io.StringIO(\"foo\") and open(\"file.env\", \"r\") (#348 by @bbc2 ). 0.18.0 - 2021-06-20 Changed Raise ValueError if quote_mode isn't one of always , auto or never in set_key (#330 by @bbc2 ). When writing a value to a .env file with set_key or dotenv set <key> <value> (#330 by @bbc2 ): Use single quotes instead of double quotes. Don't strip surrounding quotes. In auto mode, don't add quotes if the value is only made of alphanumeric characters (as determined by string.isalnum ). 0.17.1 - 2021-04-29 Fixed Fixed tests for build environments relying on PYTHONPATH (#318 by @befeleme ). 0.17.0 - 2021-04-02 Changed Make dotenv get <key> only show the value, not key=value (#313 by @bbc2 ). Added Add --override / --no-override option to dotenv run (#312 by @zueve and @bbc2 ). 0.16.0 - 2021-03-27 Changed The default value of the encoding parameter for load_dotenv and dotenv_values is now \"utf-8\" instead of None (#306 by @bbc2 ). Fix resolution order in variable expansion with override=False (#287 by @bbc2 ). 0.15.0 - 2020-10-28 Added Add --export option to set to make it prepend the binding with export (#270 by @jadutter ). Changed Make set command create the .env file in the current directory if no .env file was found (#270 by @jadutter ). Fixed Fix potentially empty expanded value for duplicate key (#260 by @bbc2 ). Fix import error on Python 3.5.0 and 3.5.1 (#267 by @gongqingkui ). Fix parsing of unquoted values containing several adjacent space or tab characters (#277 by @bbc2 , review by @x-yuri ). 0.14.0 - 2020-07-03 Changed Privilege definition in file over the environment in variable expansion (#256 by @elbehery95 ). Fixed Improve error message for when file isn't found (#245 by @snobu ). Use HTTPS URL in package meta data (#251 by @ekohl ). 0.13.0 - 2020-04-16 Added Add support for a Bash-like default value in variable expansion (#248 by @bbc2 ). 0.12.0 - 2020-02-28 Changed Use current working directory to find .env when bundled by PyInstaller (#213 by @gergelyk ). Fixed Fix escaping of quoted values written by set_key (#236 by @bbc2 ). Fix dotenv run crashing on environment variables without values (#237 by @yannham ). Remove warning when last line is empty (#238 by @bbc2 ). 0.11.0 - 2020-02-07 Added Add interpolate argument to load_dotenv and dotenv_values to disable interpolation (#232 by @ulyssessouza ). Changed Use logging instead of warnings (#231 by @bbc2 ). Fixed Fix installation in non-UTF-8 environments (#225 by @altendky ). Fix PyPI classifiers (#228 by @bbc2 ). 0.10.5 - 2020-01-19 Fixed Fix handling of malformed lines and lines without a value (#222 by @bbc2 ): Don't print warning when key has no value. Reject more malformed lines (e.g. \"A: B\", \"a='b',c\"). Fix handling of lines with just a comment (#224 by @bbc2 ). 0.10.4 - 2020-01-17 Added Make typing optional (#179 by @techalchemy ). Print a warning on malformed line (#211 by @bbc2 ). Support keys without a value (#220 by @ulyssessouza ). 0.10.3 Improve interactive mode detection ( @andrewsmith )( #183 ). Refactor parser to fix parsing inconsistencies ( @bbc2 )( #170 ). Interpret escapes as control characters only in double-quoted strings. Interpret # as start of comment only if preceded by whitespace. 0.10.2 Add type hints and expose them to users ( @qnighy )( #172 ) load_dotenv and dotenv_values now accept an encoding parameter, defaults to None ( @theskumar )( @earlbread )([#161]) Fix str / unicode inconsistency in Python 2: values are always str now. ( @bbc2 )( #121 ) Fix Unicode error in Python 2, introduced in 0.10.0. ( @bbc2 )( #176 ) 0.10.1 Fix parsing of variable without a value ( @asyncee )( @bbc2 )( #158 ) 0.10.0 Add support for UTF-8 in unquoted values ( @bbc2 )( #148 ) Add support for trailing comments ( @bbc2 )( #148 ) Add backslashes support in values ( @bbc2 )( #148 ) Add support for newlines in values ( @bbc2 )( #148 ) Force environment variables to str with Python2 on Windows ( @greyli ) Drop Python 3.3 support ( @greyli ) Fix stderr/-out/-in redirection ( @venthur ) 0.9.0 Add --version parameter to cli ( @venthur ) Enable loading from current directory ( @cjauvin ) Add 'dotenv run' command for calling arbitrary shell script with .env ( @venthur ) 0.8.1 Add tests for docs ( @Flimm ) Make 'cli' support optional. Use pip install python-dotenv[cli] . ( @theskumar ) 0.8.0 set_key and unset_key only modified the affected file instead of parsing and re-writing file, this causes comments and other file entact as it is. Add support for export prefix in the line. Internal refractoring ( @theskumar ) Allow load_dotenv and dotenv_values to work with StringIO()) ( @alanjds )( @theskumar )( #78 ) 0.7.1 Remove hard dependency on iPython ( @theskumar ) 0.7.0 Add support to override system environment variable via .env. ( @milonimrod ) ( #63 ) Disable \".env not found\" warning by default ( @maxkoryukov ) ( #57 ) 0.6.5 Add support for special characters \\ . ( @pjona ) ( #60 ) 0.6.4 Fix issue with single quotes ( @Flimm ) ( #52 ) 0.6.3 Handle unicode exception in setup.py ( #46 ) 0.6.2 Fix dotenv list command ( @ticosax ) Add iPython Support ( @tillahoffmann ) 0.6.0 Drop support for Python 2.6 Handle escaped characters and newlines in quoted values. (Thanks @iameugenejo ) Remove any spaces around unquoted key/value. (Thanks @paulochf ) Added POSIX variable expansion. (Thanks @hugochinchilla ) 0.5.1 Fix find_dotenv - it now start search from the file where this function is called from. 0.5.0 Add find_dotenv method that will try to find a .env file. (Thanks @isms ) 0.4.0 cli: Added -q/--quote option to control the behaviour of quotes around values in .env . (Thanks @hugochinchilla ). Improved test coverage.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#110-2025-03-25","text":"Feature - Add support for python 3.13 - Enhance dotenv run , switch to execvpe for better resource management and signal handling ( #523 ) by @eekstunt Fixed - find_dotenv and load_dotenv now correctly looks up at the current directory when running in debugger or pdb ( #553 by @randomseed42 ) Misc - Drop support for Python 3.8","title":"[1.1.0] - 2025-03-25"},{"location":"changelog/#101-2024-01-23","text":"Fixed Gracefully handle code which has been imported from a zipfile ( #456 by @samwyma ) Allow modules using load_dotenv to be reloaded when launched in a separate thread ([#497] by @freddyaboulton ) Fix file not closed after deletion, handle error in the rewrite function ( #469 by @Qwerty-133 ) Misc * Use pathlib.Path in tests ( #466 by @eumiro ) * Fix year in release date in changelog.md ( #454 by @jankislinger ) * Use https in README links ( #474 by @Nicals )","title":"1.0.1 - 2024-01-23"},{"location":"changelog/#100-2023-02-24","text":"Fixed Drop support for python 3.7, add python 3.12-dev (#449 by @theskumar ) Handle situations where the cwd does not exist. (#446 by @jctanner )","title":"1.0.0 - 2023-02-24"},{"location":"changelog/#0211-2023-01-21","text":"Added Use Python 3.11 non-beta in CI (#438 by @bbc2 ) Modernize variables code (#434 by @Nougat-Waffle ) Modernize main.py and parser.py code (#435 by @Nougat-Waffle ) Improve conciseness of cli.py and init .py (#439 by @Nougat-Waffle ) Improve error message for get and list commands when env file can't be opened (#441 by @bbc2 ) Updated License to align with BSD OSI template (#433 by @lsmith77 ) Fixed Fix Out-of-scope error when \"dest\" variable is undefined (#413 by @theGOTOguy ) Fix IPython test warning about deprecated magic (#440 by @bbc2 ) Fix type hint for dotenv_path var, add StrPath alias (#432 by @eaf )","title":"0.21.1 - 2023-01-21"},{"location":"changelog/#0210-2022-09-03","text":"Added CLI: add support for invocations via 'python -m'. (#395 by @theskumar ) load_dotenv function now returns False . (#388 by @larsks ) CLI: add --format= option to list command. (#407 by @sammck ) Fixed Drop Python 3.5 and 3.6 and upgrade GA (#393 by @eggplants ) Use open instead of io.open . (#389 by @rabinadk1 ) Improve documentation for variables without a value (#390 by @bbc2 ) Add parse_it to Related Projects (#410 by @naorlivne ) Update README.md (#415 by @harveer07 ) Improve documentation with direct use of MkDocs (#398 by @bbc2 )","title":"0.21.0 - 2022-09-03"},{"location":"changelog/#0200-2022-03-24","text":"Added Add encoding ( Optional[str] ) parameter to get_key , set_key and unset_key . (#379 by @bbc2 ) Fixed Use dict to specify the entry_points parameter of setuptools.setup (#376 by @mgorny ). Don't build universal wheels (#387 by @bbc2 ).","title":"0.20.0 - 2022-03-24"},{"location":"changelog/#0192-2021-11-11","text":"Fixed In set_key , add missing newline character before new entry if necessary. (#361 by @bbc2 )","title":"0.19.2 - 2021-11-11"},{"location":"changelog/#0191-2021-08-09","text":"Added Add support for Python 3.10. (#359 by @theskumar )","title":"0.19.1 - 2021-08-09"},{"location":"changelog/#0190-2021-07-24","text":"Changed Require Python 3.5 or a later version. Python 2 and 3.4 are no longer supported. (#341 by @bbc2 ). Added The dotenv_path argument of set_key and unset_key now has a type of Union[str, os.PathLike] instead of just os.PathLike (#347 by @bbc2 ). The stream argument of load_dotenv and dotenv_values can now be a text stream ( IO[str] ), which includes values like io.StringIO(\"foo\") and open(\"file.env\", \"r\") (#348 by @bbc2 ).","title":"0.19.0 - 2021-07-24"},{"location":"changelog/#0180-2021-06-20","text":"Changed Raise ValueError if quote_mode isn't one of always , auto or never in set_key (#330 by @bbc2 ). When writing a value to a .env file with set_key or dotenv set <key> <value> (#330 by @bbc2 ): Use single quotes instead of double quotes. Don't strip surrounding quotes. In auto mode, don't add quotes if the value is only made of alphanumeric characters (as determined by string.isalnum ).","title":"0.18.0 - 2021-06-20"},{"location":"changelog/#0171-2021-04-29","text":"Fixed Fixed tests for build environments relying on PYTHONPATH (#318 by @befeleme ).","title":"0.17.1 - 2021-04-29"},{"location":"changelog/#0170-2021-04-02","text":"Changed Make dotenv get <key> only show the value, not key=value (#313 by @bbc2 ). Added Add --override / --no-override option to dotenv run (#312 by @zueve and @bbc2 ).","title":"0.17.0 - 2021-04-02"},{"location":"changelog/#0160-2021-03-27","text":"Changed The default value of the encoding parameter for load_dotenv and dotenv_values is now \"utf-8\" instead of None (#306 by @bbc2 ). Fix resolution order in variable expansion with override=False (#287 by @bbc2 ).","title":"0.16.0 - 2021-03-27"},{"location":"changelog/#0150-2020-10-28","text":"Added Add --export option to set to make it prepend the binding with export (#270 by @jadutter ). Changed Make set command create the .env file in the current directory if no .env file was found (#270 by @jadutter ). Fixed Fix potentially empty expanded value for duplicate key (#260 by @bbc2 ). Fix import error on Python 3.5.0 and 3.5.1 (#267 by @gongqingkui ). Fix parsing of unquoted values containing several adjacent space or tab characters (#277 by @bbc2 , review by @x-yuri ).","title":"0.15.0 - 2020-10-28"},{"location":"changelog/#0140-2020-07-03","text":"Changed Privilege definition in file over the environment in variable expansion (#256 by @elbehery95 ). Fixed Improve error message for when file isn't found (#245 by @snobu ). Use HTTPS URL in package meta data (#251 by @ekohl ).","title":"0.14.0 - 2020-07-03"},{"location":"changelog/#0130-2020-04-16","text":"Added Add support for a Bash-like default value in variable expansion (#248 by @bbc2 ).","title":"0.13.0 - 2020-04-16"},{"location":"changelog/#0120-2020-02-28","text":"Changed Use current working directory to find .env when bundled by PyInstaller (#213 by @gergelyk ). Fixed Fix escaping of quoted values written by set_key (#236 by @bbc2 ). Fix dotenv run crashing on environment variables without values (#237 by @yannham ). Remove warning when last line is empty (#238 by @bbc2 ).","title":"0.12.0 - 2020-02-28"},{"location":"changelog/#0110-2020-02-07","text":"Added Add interpolate argument to load_dotenv and dotenv_values to disable interpolation (#232 by @ulyssessouza ). Changed Use logging instead of warnings (#231 by @bbc2 ). Fixed Fix installation in non-UTF-8 environments (#225 by @altendky ). Fix PyPI classifiers (#228 by @bbc2 ).","title":"0.11.0 - 2020-02-07"},{"location":"changelog/#0105-2020-01-19","text":"Fixed Fix handling of malformed lines and lines without a value (#222 by @bbc2 ): Don't print warning when key has no value. Reject more malformed lines (e.g. \"A: B\", \"a='b',c\"). Fix handling of lines with just a comment (#224 by @bbc2 ).","title":"0.10.5 - 2020-01-19"},{"location":"changelog/#0104-2020-01-17","text":"Added Make typing optional (#179 by @techalchemy ). Print a warning on malformed line (#211 by @bbc2 ). Support keys without a value (#220 by @ulyssessouza ).","title":"0.10.4 - 2020-01-17"},{"location":"changelog/#0103","text":"Improve interactive mode detection ( @andrewsmith )( #183 ). Refactor parser to fix parsing inconsistencies ( @bbc2 )( #170 ). Interpret escapes as control characters only in double-quoted strings. Interpret # as start of comment only if preceded by whitespace.","title":"0.10.3"},{"location":"changelog/#0102","text":"Add type hints and expose them to users ( @qnighy )( #172 ) load_dotenv and dotenv_values now accept an encoding parameter, defaults to None ( @theskumar )( @earlbread )([#161]) Fix str / unicode inconsistency in Python 2: values are always str now. ( @bbc2 )( #121 ) Fix Unicode error in Python 2, introduced in 0.10.0. ( @bbc2 )( #176 )","title":"0.10.2"},{"location":"changelog/#0101","text":"Fix parsing of variable without a value ( @asyncee )( @bbc2 )( #158 )","title":"0.10.1"},{"location":"changelog/#0100","text":"Add support for UTF-8 in unquoted values ( @bbc2 )( #148 ) Add support for trailing comments ( @bbc2 )( #148 ) Add backslashes support in values ( @bbc2 )( #148 ) Add support for newlines in values ( @bbc2 )( #148 ) Force environment variables to str with Python2 on Windows ( @greyli ) Drop Python 3.3 support ( @greyli ) Fix stderr/-out/-in redirection ( @venthur )","title":"0.10.0"},{"location":"changelog/#090","text":"Add --version parameter to cli ( @venthur ) Enable loading from current directory ( @cjauvin ) Add 'dotenv run' command for calling arbitrary shell script with .env ( @venthur )","title":"0.9.0"},{"location":"changelog/#081","text":"Add tests for docs ( @Flimm ) Make 'cli' support optional. Use pip install python-dotenv[cli] . ( @theskumar )","title":"0.8.1"},{"location":"changelog/#080","text":"set_key and unset_key only modified the affected file instead of parsing and re-writing file, this causes comments and other file entact as it is. Add support for export prefix in the line. Internal refractoring ( @theskumar ) Allow load_dotenv and dotenv_values to work with StringIO()) ( @alanjds )( @theskumar )( #78 )","title":"0.8.0"},{"location":"changelog/#071","text":"Remove hard dependency on iPython ( @theskumar )","title":"0.7.1"},{"location":"changelog/#070","text":"Add support to override system environment variable via .env. ( @milonimrod ) ( #63 ) Disable \".env not found\" warning by default ( @maxkoryukov ) ( #57 )","title":"0.7.0"},{"location":"changelog/#065","text":"Add support for special characters \\ . ( @pjona ) ( #60 )","title":"0.6.5"},{"location":"changelog/#064","text":"Fix issue with single quotes ( @Flimm ) ( #52 )","title":"0.6.4"},{"location":"changelog/#063","text":"Handle unicode exception in setup.py ( #46 )","title":"0.6.3"},{"location":"changelog/#062","text":"Fix dotenv list command ( @ticosax ) Add iPython Support ( @tillahoffmann )","title":"0.6.2"},{"location":"changelog/#060","text":"Drop support for Python 2.6 Handle escaped characters and newlines in quoted values. (Thanks @iameugenejo ) Remove any spaces around unquoted key/value. (Thanks @paulochf ) Added POSIX variable expansion. (Thanks @hugochinchilla )","title":"0.6.0"},{"location":"changelog/#051","text":"Fix find_dotenv - it now start search from the file where this function is called from.","title":"0.5.1"},{"location":"changelog/#050","text":"Add find_dotenv method that will try to find a .env file. (Thanks @isms )","title":"0.5.0"},{"location":"changelog/#040","text":"cli: Added -q/--quote option to control the behaviour of quotes around values in .env . (Thanks @hugochinchilla ). Improved test coverage.","title":"0.4.0"},{"location":"contributing/","text":"Contributing All the contributions are welcome! Please open an issue or send us a pull request. Executing the tests: $ pip install -r requirements.txt $ pip install -e . $ flake8 $ pytest or with tox installed: $ tox Documentation is published with mkdocs : $ pip install -r requirements-docs.txt $ pip install -e . $ mkdocs serve Open http://127.0.0.1:8000/ to view the documentation locally.","title":"Contributing"},{"location":"contributing/#contributing","text":"All the contributions are welcome! Please open an issue or send us a pull request. Executing the tests: $ pip install -r requirements.txt $ pip install -e . $ flake8 $ pytest or with tox installed: $ tox Documentation is published with mkdocs : $ pip install -r requirements-docs.txt $ pip install -e . $ mkdocs serve Open http://127.0.0.1:8000/ to view the documentation locally.","title":"Contributing"},{"location":"license/","text":"Copyright (c) 2014, Saurabh Kumar (python-dotenv), 2013, Ted Tieken (django-dotenv-rw), 2013, Jacob Kaplan-Moss (django-dotenv) Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of django-dotenv nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"reference/","text":"dotenv_values ( dotenv_path = None , stream = None , verbose = False , interpolate = True , encoding = 'utf-8' ) Parse a .env file and return its content as a dict. The returned dict will have None values for keys without values in the .env file. For example, foo=bar results in {\"foo\": \"bar\"} whereas foo alone results in {\"foo\": None} Parameters: Name Type Description Default dotenv_path Optional [ StrPath ] Absolute or relative path to the .env file. None stream Optional [ IO [ str ]] StringIO object with .env content, used if dotenv_path is None . None verbose bool Whether to output a warning if the .env file is missing. False encoding Optional [ str ] Encoding to be used to read the file. 'utf-8' If both dotenv_path and stream are None , find_dotenv() is used to find the .env file. Source code in src/dotenv/main.py 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 def dotenv_values ( dotenv_path : Optional [ StrPath ] = None , stream : Optional [ IO [ str ]] = None , verbose : bool = False , interpolate : bool = True , encoding : Optional [ str ] = \"utf-8\" , ) -> Dict [ str , Optional [ str ]]: \"\"\" Parse a .env file and return its content as a dict. The returned dict will have `None` values for keys without values in the .env file. For example, `foo=bar` results in `{\"foo\": \"bar\"}` whereas `foo` alone results in `{\"foo\": None}` Parameters: dotenv_path: Absolute or relative path to the .env file. stream: `StringIO` object with .env content, used if `dotenv_path` is `None`. verbose: Whether to output a warning if the .env file is missing. encoding: Encoding to be used to read the file. If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the .env file. \"\"\" if dotenv_path is None and stream is None : dotenv_path = find_dotenv () return DotEnv ( dotenv_path = dotenv_path , stream = stream , verbose = verbose , interpolate = interpolate , override = True , encoding = encoding , ) . dict () find_dotenv ( filename = '.env' , raise_error_if_not_found = False , usecwd = False ) Search in increasingly higher folders for the given file Returns path to the file if found, or an empty string otherwise Source code in src/dotenv/main.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 def find_dotenv ( filename : str = \".env\" , raise_error_if_not_found : bool = False , usecwd : bool = False , ) -> str : \"\"\" Search in increasingly higher folders for the given file Returns path to the file if found, or an empty string otherwise \"\"\" def _is_interactive (): \"\"\"Decide whether this is running in a REPL or IPython notebook\"\"\" try : main = __import__ ( \"__main__\" , None , None , fromlist = [ \"__file__\" ]) except ModuleNotFoundError : return False return not hasattr ( main , \"__file__\" ) def _is_debugger (): return sys . gettrace () is not None if usecwd or _is_interactive () or _is_debugger () or getattr ( sys , \"frozen\" , False ): # Should work without __file__, e.g. in REPL or IPython notebook. path = os . getcwd () else : # will work for .py files frame = sys . _getframe () current_file = __file__ while frame . f_code . co_filename == current_file or not os . path . exists ( frame . f_code . co_filename ): assert frame . f_back is not None frame = frame . f_back frame_filename = frame . f_code . co_filename path = os . path . dirname ( os . path . abspath ( frame_filename )) for dirname in _walk_to_root ( path ): check_path = os . path . join ( dirname , filename ) if os . path . isfile ( check_path ): return check_path if raise_error_if_not_found : raise IOError ( \"File not found\" ) return \"\" get_cli_string ( path = None , action = None , key = None , value = None , quote = None ) Returns a string suitable for running as a shell script. Useful for converting a arguments passed to a fabric task to be passed to a local or run command. Source code in src/dotenv/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def get_cli_string ( path : Optional [ str ] = None , action : Optional [ str ] = None , key : Optional [ str ] = None , value : Optional [ str ] = None , quote : Optional [ str ] = None , ): \"\"\"Returns a string suitable for running as a shell script. Useful for converting a arguments passed to a fabric task to be passed to a `local` or `run` command. \"\"\" command = [ 'dotenv' ] if quote : command . append ( f '-q { quote } ' ) if path : command . append ( f '-f { path } ' ) if action : command . append ( action ) if key : command . append ( key ) if value : if ' ' in value : command . append ( f '\" { value } \"' ) else : command . append ( value ) return ' ' . join ( command ) . strip () get_key ( dotenv_path , key_to_get , encoding = 'utf-8' ) Get the value of a given key from the given .env. Returns None if the key isn't found or doesn't have a value. Source code in src/dotenv/main.py 117 118 119 120 121 122 123 124 125 126 127 def get_key ( dotenv_path : StrPath , key_to_get : str , encoding : Optional [ str ] = \"utf-8\" , ) -> Optional [ str ]: \"\"\" Get the value of a given key from the given .env. Returns `None` if the key isn't found or doesn't have a value. \"\"\" return DotEnv ( dotenv_path , verbose = True , encoding = encoding ) . get ( key_to_get ) load_dotenv ( dotenv_path = None , stream = None , verbose = False , override = False , interpolate = True , encoding = 'utf-8' ) Parse a .env file and then load all the variables found as environment variables. Parameters: Name Type Description Default dotenv_path Optional [ StrPath ] Absolute or relative path to .env file. None stream Optional [ IO [ str ]] Text stream (such as io.StringIO ) with .env content, used if dotenv_path is None . None verbose bool Whether to output a warning the .env file is missing. False override bool Whether to override the system environment variables with the variables from the .env file. False encoding Optional [ str ] Encoding to be used to read the file. 'utf-8' Returns: Bool: True if at least one environment variable is set else False If both dotenv_path and stream are None , find_dotenv() is used to find the .env file with it's default parameters. If you need to change the default parameters of find_dotenv() , you can explicitly call find_dotenv() and pass the result to this function as dotenv_path . Source code in src/dotenv/main.py 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 def load_dotenv ( dotenv_path : Optional [ StrPath ] = None , stream : Optional [ IO [ str ]] = None , verbose : bool = False , override : bool = False , interpolate : bool = True , encoding : Optional [ str ] = \"utf-8\" , ) -> bool : \"\"\"Parse a .env file and then load all the variables found as environment variables. Parameters: dotenv_path: Absolute or relative path to .env file. stream: Text stream (such as `io.StringIO`) with .env content, used if `dotenv_path` is `None`. verbose: Whether to output a warning the .env file is missing. override: Whether to override the system environment variables with the variables from the `.env` file. encoding: Encoding to be used to read the file. Returns: Bool: True if at least one environment variable is set else False If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the .env file with it's default parameters. If you need to change the default parameters of `find_dotenv()`, you can explicitly call `find_dotenv()` and pass the result to this function as `dotenv_path`. \"\"\" if dotenv_path is None and stream is None : dotenv_path = find_dotenv () dotenv = DotEnv ( dotenv_path = dotenv_path , stream = stream , verbose = verbose , interpolate = interpolate , override = override , encoding = encoding , ) return dotenv . set_as_environment_variables () set_key ( dotenv_path , key_to_set , value_to_set , quote_mode = 'always' , export = False , encoding = 'utf-8' ) Adds or Updates a key/value to the given .env If the .env path given doesn't exist, fails instead of risking creating an orphan .env somewhere in the filesystem Source code in src/dotenv/main.py 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def set_key ( dotenv_path : StrPath , key_to_set : str , value_to_set : str , quote_mode : str = \"always\" , export : bool = False , encoding : Optional [ str ] = \"utf-8\" , ) -> Tuple [ Optional [ bool ], str , str ]: \"\"\" Adds or Updates a key/value to the given .env If the .env path given doesn't exist, fails instead of risking creating an orphan .env somewhere in the filesystem \"\"\" if quote_mode not in ( \"always\" , \"auto\" , \"never\" ): raise ValueError ( f \"Unknown quote_mode: { quote_mode } \" ) quote = quote_mode == \"always\" or ( quote_mode == \"auto\" and not value_to_set . isalnum () ) if quote : value_out = \"' {} '\" . format ( value_to_set . replace ( \"'\" , \" \\\\ '\" )) else : value_out = value_to_set if export : line_out = f \"export { key_to_set } = { value_out } \\n \" else : line_out = f \" { key_to_set } = { value_out } \\n \" with rewrite ( dotenv_path , encoding = encoding ) as ( source , dest ): replaced = False missing_newline = False for mapping in with_warn_for_invalid_lines ( parse_stream ( source )): if mapping . key == key_to_set : dest . write ( line_out ) replaced = True else : dest . write ( mapping . original . string ) missing_newline = not mapping . original . string . endswith ( \" \\n \" ) if not replaced : if missing_newline : dest . write ( \" \\n \" ) dest . write ( line_out ) return True , key_to_set , value_to_set unset_key ( dotenv_path , key_to_unset , quote_mode = 'always' , encoding = 'utf-8' ) Removes a given key from the given .env file. If the .env path given doesn't exist, fails. If the given key doesn't exist in the .env, fails. Source code in src/dotenv/main.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 def unset_key ( dotenv_path : StrPath , key_to_unset : str , quote_mode : str = \"always\" , encoding : Optional [ str ] = \"utf-8\" , ) -> Tuple [ Optional [ bool ], str ]: \"\"\" Removes a given key from the given `.env` file. If the .env path given doesn't exist, fails. If the given key doesn't exist in the .env, fails. \"\"\" if not os . path . exists ( dotenv_path ): logger . warning ( \"Can't delete from %s - it doesn't exist.\" , dotenv_path ) return None , key_to_unset removed = False with rewrite ( dotenv_path , encoding = encoding ) as ( source , dest ): for mapping in with_warn_for_invalid_lines ( parse_stream ( source )): if mapping . key == key_to_unset : removed = True else : dest . write ( mapping . original . string ) if not removed : logger . warning ( \"Key %s not removed from %s - key doesn't exist.\" , key_to_unset , dotenv_path ) return None , key_to_unset return removed , key_to_unset","title":"Reference"},{"location":"reference/#dotenv.dotenv_values","text":"Parse a .env file and return its content as a dict. The returned dict will have None values for keys without values in the .env file. For example, foo=bar results in {\"foo\": \"bar\"} whereas foo alone results in {\"foo\": None} Parameters: Name Type Description Default dotenv_path Optional [ StrPath ] Absolute or relative path to the .env file. None stream Optional [ IO [ str ]] StringIO object with .env content, used if dotenv_path is None . None verbose bool Whether to output a warning if the .env file is missing. False encoding Optional [ str ] Encoding to be used to read the file. 'utf-8' If both dotenv_path and stream are None , find_dotenv() is used to find the .env file. Source code in src/dotenv/main.py 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 def dotenv_values ( dotenv_path : Optional [ StrPath ] = None , stream : Optional [ IO [ str ]] = None , verbose : bool = False , interpolate : bool = True , encoding : Optional [ str ] = \"utf-8\" , ) -> Dict [ str , Optional [ str ]]: \"\"\" Parse a .env file and return its content as a dict. The returned dict will have `None` values for keys without values in the .env file. For example, `foo=bar` results in `{\"foo\": \"bar\"}` whereas `foo` alone results in `{\"foo\": None}` Parameters: dotenv_path: Absolute or relative path to the .env file. stream: `StringIO` object with .env content, used if `dotenv_path` is `None`. verbose: Whether to output a warning if the .env file is missing. encoding: Encoding to be used to read the file. If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the .env file. \"\"\" if dotenv_path is None and stream is None : dotenv_path = find_dotenv () return DotEnv ( dotenv_path = dotenv_path , stream = stream , verbose = verbose , interpolate = interpolate , override = True , encoding = encoding , ) . dict ()","title":"dotenv_values"},{"location":"reference/#dotenv.find_dotenv","text":"Search in increasingly higher folders for the given file Returns path to the file if found, or an empty string otherwise Source code in src/dotenv/main.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 def find_dotenv ( filename : str = \".env\" , raise_error_if_not_found : bool = False , usecwd : bool = False , ) -> str : \"\"\" Search in increasingly higher folders for the given file Returns path to the file if found, or an empty string otherwise \"\"\" def _is_interactive (): \"\"\"Decide whether this is running in a REPL or IPython notebook\"\"\" try : main = __import__ ( \"__main__\" , None , None , fromlist = [ \"__file__\" ]) except ModuleNotFoundError : return False return not hasattr ( main , \"__file__\" ) def _is_debugger (): return sys . gettrace () is not None if usecwd or _is_interactive () or _is_debugger () or getattr ( sys , \"frozen\" , False ): # Should work without __file__, e.g. in REPL or IPython notebook. path = os . getcwd () else : # will work for .py files frame = sys . _getframe () current_file = __file__ while frame . f_code . co_filename == current_file or not os . path . exists ( frame . f_code . co_filename ): assert frame . f_back is not None frame = frame . f_back frame_filename = frame . f_code . co_filename path = os . path . dirname ( os . path . abspath ( frame_filename )) for dirname in _walk_to_root ( path ): check_path = os . path . join ( dirname , filename ) if os . path . isfile ( check_path ): return check_path if raise_error_if_not_found : raise IOError ( \"File not found\" ) return \"\"","title":"find_dotenv"},{"location":"reference/#dotenv.get_cli_string","text":"Returns a string suitable for running as a shell script. Useful for converting a arguments passed to a fabric task to be passed to a local or run command. Source code in src/dotenv/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def get_cli_string ( path : Optional [ str ] = None , action : Optional [ str ] = None , key : Optional [ str ] = None , value : Optional [ str ] = None , quote : Optional [ str ] = None , ): \"\"\"Returns a string suitable for running as a shell script. Useful for converting a arguments passed to a fabric task to be passed to a `local` or `run` command. \"\"\" command = [ 'dotenv' ] if quote : command . append ( f '-q { quote } ' ) if path : command . append ( f '-f { path } ' ) if action : command . append ( action ) if key : command . append ( key ) if value : if ' ' in value : command . append ( f '\" { value } \"' ) else : command . append ( value ) return ' ' . join ( command ) . strip ()","title":"get_cli_string"},{"location":"reference/#dotenv.get_key","text":"Get the value of a given key from the given .env. Returns None if the key isn't found or doesn't have a value. Source code in src/dotenv/main.py 117 118 119 120 121 122 123 124 125 126 127 def get_key ( dotenv_path : StrPath , key_to_get : str , encoding : Optional [ str ] = \"utf-8\" , ) -> Optional [ str ]: \"\"\" Get the value of a given key from the given .env. Returns `None` if the key isn't found or doesn't have a value. \"\"\" return DotEnv ( dotenv_path , verbose = True , encoding = encoding ) . get ( key_to_get )","title":"get_key"},{"location":"reference/#dotenv.load_dotenv","text":"Parse a .env file and then load all the variables found as environment variables. Parameters: Name Type Description Default dotenv_path Optional [ StrPath ] Absolute or relative path to .env file. None stream Optional [ IO [ str ]] Text stream (such as io.StringIO ) with .env content, used if dotenv_path is None . None verbose bool Whether to output a warning the .env file is missing. False override bool Whether to override the system environment variables with the variables from the .env file. False encoding Optional [ str ] Encoding to be used to read the file. 'utf-8' Returns: Bool: True if at least one environment variable is set else False If both dotenv_path and stream are None , find_dotenv() is used to find the .env file with it's default parameters. If you need to change the default parameters of find_dotenv() , you can explicitly call find_dotenv() and pass the result to this function as dotenv_path . Source code in src/dotenv/main.py 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 def load_dotenv ( dotenv_path : Optional [ StrPath ] = None , stream : Optional [ IO [ str ]] = None , verbose : bool = False , override : bool = False , interpolate : bool = True , encoding : Optional [ str ] = \"utf-8\" , ) -> bool : \"\"\"Parse a .env file and then load all the variables found as environment variables. Parameters: dotenv_path: Absolute or relative path to .env file. stream: Text stream (such as `io.StringIO`) with .env content, used if `dotenv_path` is `None`. verbose: Whether to output a warning the .env file is missing. override: Whether to override the system environment variables with the variables from the `.env` file. encoding: Encoding to be used to read the file. Returns: Bool: True if at least one environment variable is set else False If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the .env file with it's default parameters. If you need to change the default parameters of `find_dotenv()`, you can explicitly call `find_dotenv()` and pass the result to this function as `dotenv_path`. \"\"\" if dotenv_path is None and stream is None : dotenv_path = find_dotenv () dotenv = DotEnv ( dotenv_path = dotenv_path , stream = stream , verbose = verbose , interpolate = interpolate , override = override , encoding = encoding , ) return dotenv . set_as_environment_variables ()","title":"load_dotenv"},{"location":"reference/#dotenv.set_key","text":"Adds or Updates a key/value to the given .env If the .env path given doesn't exist, fails instead of risking creating an orphan .env somewhere in the filesystem Source code in src/dotenv/main.py 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def set_key ( dotenv_path : StrPath , key_to_set : str , value_to_set : str , quote_mode : str = \"always\" , export : bool = False , encoding : Optional [ str ] = \"utf-8\" , ) -> Tuple [ Optional [ bool ], str , str ]: \"\"\" Adds or Updates a key/value to the given .env If the .env path given doesn't exist, fails instead of risking creating an orphan .env somewhere in the filesystem \"\"\" if quote_mode not in ( \"always\" , \"auto\" , \"never\" ): raise ValueError ( f \"Unknown quote_mode: { quote_mode } \" ) quote = quote_mode == \"always\" or ( quote_mode == \"auto\" and not value_to_set . isalnum () ) if quote : value_out = \"' {} '\" . format ( value_to_set . replace ( \"'\" , \" \\\\ '\" )) else : value_out = value_to_set if export : line_out = f \"export { key_to_set } = { value_out } \\n \" else : line_out = f \" { key_to_set } = { value_out } \\n \" with rewrite ( dotenv_path , encoding = encoding ) as ( source , dest ): replaced = False missing_newline = False for mapping in with_warn_for_invalid_lines ( parse_stream ( source )): if mapping . key == key_to_set : dest . write ( line_out ) replaced = True else : dest . write ( mapping . original . string ) missing_newline = not mapping . original . string . endswith ( \" \\n \" ) if not replaced : if missing_newline : dest . write ( \" \\n \" ) dest . write ( line_out ) return True , key_to_set , value_to_set","title":"set_key"},{"location":"reference/#dotenv.unset_key","text":"Removes a given key from the given .env file. If the .env path given doesn't exist, fails. If the given key doesn't exist in the .env, fails. Source code in src/dotenv/main.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 def unset_key ( dotenv_path : StrPath , key_to_unset : str , quote_mode : str = \"always\" , encoding : Optional [ str ] = \"utf-8\" , ) -> Tuple [ Optional [ bool ], str ]: \"\"\" Removes a given key from the given `.env` file. If the .env path given doesn't exist, fails. If the given key doesn't exist in the .env, fails. \"\"\" if not os . path . exists ( dotenv_path ): logger . warning ( \"Can't delete from %s - it doesn't exist.\" , dotenv_path ) return None , key_to_unset removed = False with rewrite ( dotenv_path , encoding = encoding ) as ( source , dest ): for mapping in with_warn_for_invalid_lines ( parse_stream ( source )): if mapping . key == key_to_unset : removed = True else : dest . write ( mapping . original . string ) if not removed : logger . warning ( \"Key %s not removed from %s - key doesn't exist.\" , key_to_unset , dotenv_path ) return None , key_to_unset return removed , key_to_unset","title":"unset_key"}]}
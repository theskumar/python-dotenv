{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"python-dotenv","text":"<p>python-dotenv reads key-value pairs from a <code>.env</code> file and can set them as environment variables. It helps in the development of applications following the 12-factor principles.</p> <ul> <li>Getting Started</li> <li>Other Use Cases<ul> <li>Load configuration without altering the environment</li> <li>Parse configuration as a stream</li> <li>Load .env files in IPython</li> </ul> </li> <li>Command-line Interface</li> <li>File format<ul> <li>Multiline values</li> <li>Variable expansion</li> </ul> </li> <li>Related Projects</li> <li>Acknowledgements</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<pre><code>pip install python-dotenv\n</code></pre> <p>If your application takes its configuration from environment variables, like a 12-factor application, launching it in development is not very practical because you have to set those environment variables yourself.</p> <p>To help you with that, you can add python-dotenv to your application to make it load the configuration from a <code>.env</code> file when it is present (e.g. in development) while remaining configurable via the environment:</p> <pre><code>from dotenv import load_dotenv\n\nload_dotenv()  # reads variables from a .env file and sets them in os.environ\n</code></pre>"},{"location":"#code-of-your-application-which-uses-environment-variables-eg-from-osenviron-or","title":"Code of your application, which uses environment variables (e.g. from <code>os.environ</code> or","text":""},{"location":"#osgetenv-as-if-they-came-from-the-actual-environment","title":"<code>os.getenv</code>) as if they came from the actual environment.","text":"<p>By default, <code>load_dotenv()</code> will:</p> <ul> <li>Look for a <code>.env</code> file in the same directory as the Python script (or higher up the directory tree).</li> <li>Read each key-value pair and add it to <code>os.environ</code>.</li> <li>Not override an environment variable that is already set, unless you explicitly pass <code>override=True</code>.</li> </ul> <p>To configure the development environment, add a <code>.env</code> in the root directory of your project:</p> <pre><code>.\n\u251c\u2500\u2500 .env\n\u2514\u2500\u2500 foo.py\n</code></pre> <p>The syntax of <code>.env</code> files supported by python-dotenv is similar to that of Bash:</p> <pre><code># Development settings\nDOMAIN=example.org\nADMIN_EMAIL=admin@${DOMAIN}\nROOT_URL=${DOMAIN}/app\n</code></pre> <p>If you use variables in values, ensure they are surrounded with <code>{</code> and <code>}</code>, like <code>${DOMAIN}</code>, as bare variables such as <code>$DOMAIN</code> are not expanded.</p> <p>You will probably want to add <code>.env</code> to your <code>.gitignore</code>, especially if it contains secrets like a password.</p> <p>See the section \"File format\" below for more information about what you can write in a <code>.env</code> file.</p>"},{"location":"#other-use-cases","title":"Other Use Cases","text":""},{"location":"#load-configuration-without-altering-the-environment","title":"Load configuration without altering the environment","text":"<p>The function <code>dotenv_values</code> works more or less the same way as <code>load_dotenv</code>, except it doesn't touch the environment, it just returns a <code>dict</code> with the values parsed from the <code>.env</code> file.</p> <pre><code>from dotenv import dotenv_values\n\nconfig = dotenv_values(\".env\")  # config = {\"USER\": \"foo\", \"EMAIL\": \"foo@example.org\"}\n</code></pre> <p>This notably enables advanced configuration management:</p> <pre><code>import os\nfrom dotenv import dotenv_values\n\nconfig = {\n    **dotenv_values(\".env.shared\"),  # load shared development variables\n    **dotenv_values(\".env.secret\"),  # load sensitive variables\n    **os.environ,  # override loaded values with environment variables\n}\n</code></pre>"},{"location":"#parse-configuration-as-a-stream","title":"Parse configuration as a stream","text":"<p><code>load_dotenv</code> and <code>dotenv_values</code> accept streams via their <code>stream</code> argument.  It is thus possible to load the variables from sources other than the filesystem (e.g. the network).</p> <pre><code>from io import StringIO\n\nfrom dotenv import load_dotenv\n\nconfig = StringIO(\"USER=foo\\nEMAIL=foo@example.org\")\nload_dotenv(stream=config)\n</code></pre>"},{"location":"#load-env-files-in-ipython","title":"Load .env files in IPython","text":"<p>You can use dotenv in IPython.  By default, it will use <code>find_dotenv</code> to search for a <code>.env</code> file:</p> <pre><code>%load_ext dotenv\n%dotenv\n</code></pre> <p>You can also specify a path:</p> <pre><code>%dotenv relative/or/absolute/path/to/.env\n</code></pre> <p>Optional flags:</p> <ul> <li><code>-o</code> to override existing variables.</li> <li><code>-v</code> for increased verbosity.</li> </ul>"},{"location":"#disable-load_dotenv","title":"Disable load_dotenv","text":"<p>Set <code>PYTHON_DOTENV_DISABLED=1</code> to disable <code>load_dotenv()</code> from loading .env files or streams. Useful when you can't modify third-party package calls or in production.</p>"},{"location":"#command-line-interface","title":"Command-line Interface","text":"<p>A CLI interface <code>dotenv</code> is also included, which helps you manipulate the <code>.env</code> file without manually opening it.</p> <pre><code>$ pip install \"python-dotenv[cli]\"\n$ dotenv set USER foo\n$ dotenv set EMAIL foo@example.org\n$ dotenv list\nUSER=foo\nEMAIL=foo@example.org\n$ dotenv list --format=json\n{\n  \"USER\": \"foo\",\n  \"EMAIL\": \"foo@example.org\"\n}\n$ dotenv run -- python foo.py\n</code></pre> <p>Run <code>dotenv --help</code> for more information about the options and subcommands.</p>"},{"location":"#file-format","title":"File format","text":"<p>The format is not formally specified and still improves over time.  That being said, <code>.env</code> files should mostly look like Bash files.</p> <p>Keys can be unquoted or single-quoted. Values can be unquoted, single- or double-quoted. Spaces before and after keys, equal signs, and values are ignored. Values can be followed by a comment.  Lines can start with the <code>export</code> directive, which does not affect their interpretation.</p> <p>Allowed escape sequences:</p> <ul> <li>in single-quoted values: <code>\\\\</code>, <code>\\'</code></li> <li>in double-quoted values: <code>\\\\</code>, <code>\\'</code>, <code>\\\"</code>, <code>\\a</code>, <code>\\b</code>, <code>\\f</code>, <code>\\n</code>, <code>\\r</code>, <code>\\t</code>, <code>\\v</code></li> </ul>"},{"location":"#multiline-values","title":"Multiline values","text":"<p>It is possible for single- or double-quoted values to span multiple lines.  The following examples are equivalent:</p> <pre><code>FOO=\"first line\nsecond line\"\n</code></pre> <pre><code>FOO=\"first line\\nsecond line\"\n</code></pre>"},{"location":"#variable-without-a-value","title":"Variable without a value","text":"<p>A variable can have no value:</p> <pre><code>FOO\n</code></pre> <p>It results in <code>dotenv_values</code> associating that variable name with the value <code>None</code> (e.g. <code>{\"FOO\": None}</code>. <code>load_dotenv</code>, on the other hand, simply ignores such variables.</p> <p>This shouldn't be confused with <code>FOO=</code>, in which case the variable is associated with the empty string.</p>"},{"location":"#variable-expansion","title":"Variable expansion","text":"<p>python-dotenv can interpolate variables using POSIX variable expansion.</p> <p>With <code>load_dotenv(override=True)</code> or <code>dotenv_values()</code>, the value of a variable is the first of the values defined in the following list:</p> <ul> <li>Value of that variable in the <code>.env</code> file.</li> <li>Value of that variable in the environment.</li> <li>Default value, if provided.</li> <li>Empty string.</li> </ul> <p>With <code>load_dotenv(override=False)</code>, the value of a variable is the first of the values defined in the following list:</p> <ul> <li>Value of that variable in the environment.</li> <li>Value of that variable in the <code>.env</code> file.</li> <li>Default value, if provided.</li> <li>Empty string.</li> </ul>"},{"location":"#related-projects","title":"Related Projects","text":"<ul> <li>Honcho - For managing     Procfile-based applications.</li> <li>django-dotenv</li> <li>django-environ</li> <li>django-environ-2</li> <li>django-configuration</li> <li>dump-env</li> <li>environs</li> <li>dynaconf</li> <li>parse_it</li> <li>python-decouple</li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>This project is currently maintained by Saurabh Kumar and Bertrand Bonnefoy-Claudet and would not have been possible without the support of these awesome people.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#120-2025-10-26","title":"1.2.0 - 2025-10-26","text":"<ul> <li>Upgrade build system to use PEP 517 &amp; PEP 518 to use <code>build</code> and <code>pyproject.toml</code> by @EpicWink in #583</li> <li>Add support for Python 3.14 by @23f3001135 in #579</li> <li>Add support for disabling of <code>load_dotenv()</code> using <code>PYTHON_DOTENV_DISABLED</code> env var. by @matthewfranglen in #569</li> </ul>"},{"location":"changelog/#111-2025-06-24","title":"1.1.1 - 2025-06-24","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>CLI: Ensure <code>find_dotenv</code> work reliably on python 3.13 by @theskumar in #563</li> <li>CLI: revert the use of execvpe on Windows by @wrongontheinternet in #566</li> </ul>"},{"location":"changelog/#110-2025-03-25","title":"1.1.0 - 2025-03-25","text":"<p>Feature</p> <ul> <li>Add support for python 3.13</li> <li>Enhance <code>dotenv run</code>, switch to <code>execvpe</code> for better resource management and signal handling (#523) by @eekstunt</li> </ul> <p>Fixed</p> <ul> <li><code>find_dotenv</code> and <code>load_dotenv</code> now correctly looks up at the current directory when running in debugger or pdb (#553 by @randomseed42)</li> </ul> <p>Misc</p> <ul> <li>Drop support for Python 3.8</li> </ul>"},{"location":"changelog/#101-2024-01-23","title":"1.0.1 - 2024-01-23","text":"<p>Fixed</p> <ul> <li>Gracefully handle code which has been imported from a zipfile (#456 by @samwyma)</li> <li>Allow modules using <code>load_dotenv</code> to be reloaded when launched in a separate thread ([#497] by @freddyaboulton)</li> <li>Fix file not closed after deletion, handle error in the rewrite function (#469 by @Qwerty-133)</li> </ul> <p>Misc * Use pathlib.Path in tests (#466 by @eumiro) * Fix year in release date in changelog.md (#454 by @jankislinger) * Use https in README links (#474 by @Nicals)</p>"},{"location":"changelog/#100-2023-02-24","title":"1.0.0 - 2023-02-24","text":"<p>Fixed</p> <ul> <li>Drop support for python 3.7, add python 3.12-dev (#449 by @theskumar)</li> <li>Handle situations where the cwd does not exist. (#446 by @jctanner)</li> </ul>"},{"location":"changelog/#0211-2023-01-21","title":"0.21.1 - 2023-01-21","text":"<p>Added</p> <ul> <li>Use Python 3.11 non-beta in CI (#438 by @bbc2)</li> <li>Modernize variables code (#434 by @Nougat-Waffle)</li> <li>Modernize main.py and parser.py code (#435 by @Nougat-Waffle)</li> <li>Improve conciseness of cli.py and init.py (#439 by @Nougat-Waffle)</li> <li>Improve error message for <code>get</code> and <code>list</code> commands when env file can't be opened (#441 by @bbc2)</li> <li>Updated License to align with BSD OSI template (#433 by @lsmith77)</li> </ul> <p>Fixed</p> <ul> <li>Fix Out-of-scope error when \"dest\" variable is undefined (#413 by @theGOTOguy)</li> <li>Fix IPython test warning about deprecated <code>magic</code> (#440 by @bbc2)</li> <li>Fix type hint for dotenv_path var, add StrPath alias (#432 by @eaf)</li> </ul>"},{"location":"changelog/#0210-2022-09-03","title":"0.21.0 - 2022-09-03","text":"<p>Added</p> <ul> <li>CLI: add support for invocations via 'python -m'. (#395 by @theskumar)</li> <li><code>load_dotenv</code> function now returns <code>False</code>. (#388 by @larsks)</li> <li>CLI: add --format= option to list command. (#407 by @sammck)</li> </ul> <p>Fixed</p> <ul> <li>Drop Python 3.5 and 3.6 and upgrade GA (#393 by @eggplants)</li> <li>Use <code>open</code> instead of <code>io.open</code>. (#389 by @rabinadk1)</li> <li>Improve documentation for variables without a value (#390 by @bbc2)</li> <li>Add <code>parse_it</code> to Related Projects (#410 by @naorlivne)</li> <li>Update README.md (#415 by @harveer07)</li> <li>Improve documentation with direct use of MkDocs (#398 by @bbc2)</li> </ul>"},{"location":"changelog/#0200-2022-03-24","title":"0.20.0 - 2022-03-24","text":"<p>Added</p> <ul> <li>Add <code>encoding</code> (<code>Optional[str]</code>) parameter to <code>get_key</code>, <code>set_key</code> and <code>unset_key</code>.   (#379 by @bbc2)</li> </ul> <p>Fixed</p> <ul> <li>Use dict to specify the <code>entry_points</code> parameter of <code>setuptools.setup</code> (#376 by   @mgorny).</li> <li>Don't build universal wheels (#387 by @bbc2).</li> </ul>"},{"location":"changelog/#0192-2021-11-11","title":"0.19.2 - 2021-11-11","text":"<p>Fixed</p> <ul> <li>In <code>set_key</code>, add missing newline character before new entry if necessary. (#361 by   @bbc2)</li> </ul>"},{"location":"changelog/#0191-2021-08-09","title":"0.19.1 - 2021-08-09","text":"<p>Added</p> <ul> <li>Add support for Python 3.10. (#359 by @theskumar)</li> </ul>"},{"location":"changelog/#0190-2021-07-24","title":"0.19.0 - 2021-07-24","text":"<p>Changed</p> <ul> <li>Require Python 3.5 or a later version.  Python 2 and 3.4 are no longer supported. (#341   by @bbc2).</li> </ul> <p>Added</p> <ul> <li>The <code>dotenv_path</code> argument of <code>set_key</code> and <code>unset_key</code> now has a type of <code>Union[str,   os.PathLike]</code> instead of just <code>os.PathLike</code> (#347 by @bbc2).</li> <li>The <code>stream</code> argument of <code>load_dotenv</code> and <code>dotenv_values</code> can now be a text stream   (<code>IO[str]</code>), which includes values like <code>io.StringIO(\"foo\")</code> and <code>open(\"file.env\",   \"r\")</code> (#348 by @bbc2).</li> </ul>"},{"location":"changelog/#0180-2021-06-20","title":"0.18.0 - 2021-06-20","text":"<p>Changed</p> <ul> <li>Raise <code>ValueError</code> if <code>quote_mode</code> isn't one of <code>always</code>, <code>auto</code> or <code>never</code> in   <code>set_key</code> (#330 by @bbc2).</li> <li>When writing a value to a .env file with <code>set_key</code> or <code>dotenv set &lt;key&gt; &lt;value&gt;</code> (#330   by @bbc2):<ul> <li>Use single quotes instead of double quotes.</li> <li>Don't strip surrounding quotes.</li> <li>In <code>auto</code> mode, don't add quotes if the value is only made of alphanumeric characters   (as determined by <code>string.isalnum</code>).</li> </ul> </li> </ul>"},{"location":"changelog/#0171-2021-04-29","title":"0.17.1 - 2021-04-29","text":"<p>Fixed</p> <ul> <li>Fixed tests for build environments relying on <code>PYTHONPATH</code> (#318 by @befeleme).</li> </ul>"},{"location":"changelog/#0170-2021-04-02","title":"0.17.0 - 2021-04-02","text":"<p>Changed</p> <ul> <li>Make <code>dotenv get &lt;key&gt;</code> only show the value, not <code>key=value</code> (#313 by @bbc2).</li> </ul> <p>Added</p> <ul> <li>Add <code>--override</code>/<code>--no-override</code> option to <code>dotenv run</code> (#312 by @zueve and @bbc2).</li> </ul>"},{"location":"changelog/#0160-2021-03-27","title":"0.16.0 - 2021-03-27","text":"<p>Changed</p> <ul> <li>The default value of the <code>encoding</code> parameter for <code>load_dotenv</code> and <code>dotenv_values</code> is   now <code>\"utf-8\"</code> instead of <code>None</code> (#306 by @bbc2).</li> <li>Fix resolution order in variable expansion with <code>override=False</code> (#287 by @bbc2).</li> </ul>"},{"location":"changelog/#0150-2020-10-28","title":"0.15.0 - 2020-10-28","text":"<p>Added</p> <ul> <li>Add <code>--export</code> option to <code>set</code> to make it prepend the binding with <code>export</code> (#270 by   @jadutter).</li> </ul> <p>Changed</p> <ul> <li>Make <code>set</code> command create the <code>.env</code> file in the current directory if no <code>.env</code> file was   found (#270 by @jadutter).</li> </ul> <p>Fixed</p> <ul> <li>Fix potentially empty expanded value for duplicate key (#260 by @bbc2).</li> <li>Fix import error on Python 3.5.0 and 3.5.1 (#267 by @gongqingkui).</li> <li>Fix parsing of unquoted values containing several adjacent space or tab characters   (#277 by @bbc2, review by @x-yuri).</li> </ul>"},{"location":"changelog/#0140-2020-07-03","title":"0.14.0 - 2020-07-03","text":"<p>Changed</p> <ul> <li>Privilege definition in file over the environment in variable expansion (#256 by   @elbehery95).</li> </ul> <p>Fixed</p> <ul> <li>Improve error message for when file isn't found (#245 by @snobu).</li> <li>Use HTTPS URL in package meta data (#251 by @ekohl).</li> </ul>"},{"location":"changelog/#0130-2020-04-16","title":"0.13.0 - 2020-04-16","text":"<p>Added</p> <ul> <li>Add support for a Bash-like default value in variable expansion (#248 by @bbc2).</li> </ul>"},{"location":"changelog/#0120-2020-02-28","title":"0.12.0 - 2020-02-28","text":"<p>Changed</p> <ul> <li>Use current working directory to find <code>.env</code> when bundled by PyInstaller (#213 by   @gergelyk).</li> </ul> <p>Fixed</p> <ul> <li>Fix escaping of quoted values written by <code>set_key</code> (#236 by @bbc2).</li> <li>Fix <code>dotenv run</code> crashing on environment variables without values (#237 by @yannham).</li> <li>Remove warning when last line is empty (#238 by @bbc2).</li> </ul>"},{"location":"changelog/#0110-2020-02-07","title":"0.11.0 - 2020-02-07","text":"<p>Added</p> <ul> <li>Add <code>interpolate</code> argument to <code>load_dotenv</code> and <code>dotenv_values</code> to disable interpolation   (#232 by @ulyssessouza).</li> </ul> <p>Changed</p> <ul> <li>Use logging instead of warnings (#231 by @bbc2).</li> </ul> <p>Fixed</p> <ul> <li>Fix installation in non-UTF-8 environments (#225 by @altendky).</li> <li>Fix PyPI classifiers (#228 by @bbc2).</li> </ul>"},{"location":"changelog/#0105-2020-01-19","title":"0.10.5 - 2020-01-19","text":"<p>Fixed</p> <ul> <li>Fix handling of malformed lines and lines without a value (#222 by @bbc2):<ul> <li>Don't print warning when key has no value.</li> <li>Reject more malformed lines (e.g. \"A: B\", \"a='b',c\").</li> </ul> </li> <li>Fix handling of lines with just a comment (#224 by @bbc2).</li> </ul>"},{"location":"changelog/#0104-2020-01-17","title":"0.10.4 - 2020-01-17","text":"<p>Added</p> <ul> <li>Make typing optional (#179 by @techalchemy).</li> <li>Print a warning on malformed line (#211 by @bbc2).</li> <li>Support keys without a value (#220 by @ulyssessouza).</li> </ul>"},{"location":"changelog/#0103","title":"0.10.3","text":"<ul> <li>Improve interactive mode detection (@andrewsmith)(#183).</li> <li>Refactor parser to fix parsing inconsistencies (@bbc2)(#170).<ul> <li>Interpret escapes as control characters only in double-quoted strings.</li> <li>Interpret <code>#</code> as start of comment only if preceded by whitespace.</li> </ul> </li> </ul>"},{"location":"changelog/#0102","title":"0.10.2","text":"<ul> <li>Add type hints and expose them to users (@qnighy)(#172)</li> <li><code>load_dotenv</code> and <code>dotenv_values</code> now accept an <code>encoding</code> parameter, defaults to <code>None</code>   (@theskumar)(@earlbread)([#161])</li> <li>Fix <code>str</code>/<code>unicode</code> inconsistency in Python 2: values are always <code>str</code> now. (@bbc2)(#121)</li> <li>Fix Unicode error in Python 2, introduced in 0.10.0. (@bbc2)(#176)</li> </ul>"},{"location":"changelog/#0101","title":"0.10.1","text":"<ul> <li>Fix parsing of variable without a value (@asyncee)(@bbc2)(#158)</li> </ul>"},{"location":"changelog/#0100","title":"0.10.0","text":"<ul> <li>Add support for UTF-8 in unquoted values (@bbc2)(#148)</li> <li>Add support for trailing comments (@bbc2)(#148)</li> <li>Add backslashes support in values (@bbc2)(#148)</li> <li>Add support for newlines in values (@bbc2)(#148)</li> <li>Force environment variables to str with Python2 on Windows (@greyli)</li> <li>Drop Python 3.3 support (@greyli)</li> <li>Fix stderr/-out/-in redirection (@venthur)</li> </ul>"},{"location":"changelog/#090","title":"0.9.0","text":"<ul> <li>Add <code>--version</code> parameter to cli (@venthur)</li> <li>Enable loading from current directory (@cjauvin)</li> <li>Add 'dotenv run' command for calling arbitrary shell script with .env (@venthur)</li> </ul>"},{"location":"changelog/#081","title":"0.8.1","text":"<ul> <li>Add tests for docs (@Flimm)</li> <li>Make 'cli' support optional. Use <code>pip install python-dotenv[cli]</code>. (@theskumar)</li> </ul>"},{"location":"changelog/#080","title":"0.8.0","text":"<ul> <li><code>set_key</code> and <code>unset_key</code> only modified the affected file instead of     parsing and re-writing file, this causes comments and other file     entact as it is.</li> <li>Add support for <code>export</code> prefix in the line.</li> <li>Internal refractoring (@theskumar)</li> <li>Allow <code>load_dotenv</code> and <code>dotenv_values</code> to work with <code>StringIO())</code> (@alanjds)(@theskumar)(#78)</li> </ul>"},{"location":"changelog/#071","title":"0.7.1","text":"<ul> <li>Remove hard dependency on iPython (@theskumar)</li> </ul>"},{"location":"changelog/#070","title":"0.7.0","text":"<ul> <li>Add support to override system environment variable via .env.     (@milonimrod)     (#63)</li> <li>Disable \".env not found\" warning by default     (@maxkoryukov)     (#57)</li> </ul>"},{"location":"changelog/#065","title":"0.6.5","text":"<ul> <li>Add support for special characters <code>\\</code>.     (@pjona)     (#60)</li> </ul>"},{"location":"changelog/#064","title":"0.6.4","text":"<ul> <li>Fix issue with single quotes (@Flimm)     (#52)</li> </ul>"},{"location":"changelog/#063","title":"0.6.3","text":"<ul> <li>Handle unicode exception in setup.py     (#46)</li> </ul>"},{"location":"changelog/#062","title":"0.6.2","text":"<ul> <li>Fix dotenv list command (@ticosax)</li> <li>Add iPython Support     (@tillahoffmann)</li> </ul>"},{"location":"changelog/#060","title":"0.6.0","text":"<ul> <li>Drop support for Python 2.6</li> <li>Handle escaped characters and newlines in quoted values. (Thanks     @iameugenejo)</li> <li>Remove any spaces around unquoted key/value. (Thanks     @paulochf)</li> <li>Added POSIX variable expansion. (Thanks     @hugochinchilla)</li> </ul>"},{"location":"changelog/#051","title":"0.5.1","text":"<ul> <li>Fix <code>find_dotenv</code> - it now start search from the file where this     function is called from.</li> </ul>"},{"location":"changelog/#050","title":"0.5.0","text":"<ul> <li>Add <code>find_dotenv</code> method that will try to find a <code>.env</code> file.     (Thanks @isms)</li> </ul>"},{"location":"changelog/#040","title":"0.4.0","text":"<ul> <li>cli: Added <code>-q/--quote</code> option to control the behaviour of quotes     around values in <code>.env</code>. (Thanks     @hugochinchilla).</li> <li>Improved test coverage.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>All the contributions are welcome! Please open an issue or send us a pull request.</p> <p>Executing the tests:</p> <pre><code>$ uv venv\n$ uv pip install -r requirements.txt\n$ uv pip install -e .\n$ uv ruff check .\n$ uv format .\n$ uv run pytest\n</code></pre> <p>or with tox installed:</p> <pre><code>$ tox\n</code></pre> <p>Use of pre-commit is recommended:</p> <pre><code>$ uv run precommit install\n</code></pre> <p>Documentation is published with mkdocs:</p> <pre><code>$ uv pip install -r requirements-docs.txt\n$ uv pip install -e .\n$ uv run mkdocs serve\n</code></pre> <p>Open http://127.0.0.1:8000/ to view the documentation locally.</p>"},{"location":"license/","title":"License","text":"<p>Copyright (c) 2014, Saurabh Kumar (python-dotenv), 2013, Ted Tieken (django-dotenv-rw), 2013, Jacob Kaplan-Moss (django-dotenv)</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li>Redistributions of source code must retain the above copyright notice,   this list of conditions and the following disclaimer.</li> </ul> <ul> <li>Redistributions in binary form must reproduce the above copyright notice,   this list of conditions and the following disclaimer in the documentation   and/or other materials provided with the distribution.</li> </ul> <ul> <li>Neither the name of django-dotenv nor the names of its contributors   may be used to endorse or promote products derived from this software   without specific prior written permission.</li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#dotenv.dotenv_values","title":"<code>dotenv_values(dotenv_path=None, stream=None, verbose=False, interpolate=True, encoding='utf-8')</code>","text":"<p>Parse a .env file and return its content as a dict.</p> <p>The returned dict will have <code>None</code> values for keys without values in the .env file. For example, <code>foo=bar</code> results in <code>{\"foo\": \"bar\"}</code> whereas <code>foo</code> alone results in <code>{\"foo\": None}</code></p> <p>Parameters:</p> Name Type Description Default <code>dotenv_path</code> <code>Optional[StrPath]</code> <p>Absolute or relative path to the .env file.</p> <code>None</code> <code>stream</code> <code>Optional[IO[str]]</code> <p><code>StringIO</code> object with .env content, used if <code>dotenv_path</code> is <code>None</code>.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Whether to output a warning if the .env file is missing.</p> <code>False</code> <code>encoding</code> <code>Optional[str]</code> <p>Encoding to be used to read the file.</p> <code>'utf-8'</code> <p>If both <code>dotenv_path</code> and <code>stream</code> are <code>None</code>, <code>find_dotenv()</code> is used to find the .env file.</p> Source code in <code>src/dotenv/main.py</code> <pre><code>def dotenv_values(\n    dotenv_path: Optional[StrPath] = None,\n    stream: Optional[IO[str]] = None,\n    verbose: bool = False,\n    interpolate: bool = True,\n    encoding: Optional[str] = \"utf-8\",\n) -&gt; Dict[str, Optional[str]]:\n    \"\"\"\n    Parse a .env file and return its content as a dict.\n\n    The returned dict will have `None` values for keys without values in the .env file.\n    For example, `foo=bar` results in `{\"foo\": \"bar\"}` whereas `foo` alone results in\n    `{\"foo\": None}`\n\n    Parameters:\n        dotenv_path: Absolute or relative path to the .env file.\n        stream: `StringIO` object with .env content, used if `dotenv_path` is `None`.\n        verbose: Whether to output a warning if the .env file is missing.\n        encoding: Encoding to be used to read the file.\n\n    If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the\n    .env file.\n    \"\"\"\n    if dotenv_path is None and stream is None:\n        dotenv_path = find_dotenv()\n\n    return DotEnv(\n        dotenv_path=dotenv_path,\n        stream=stream,\n        verbose=verbose,\n        interpolate=interpolate,\n        override=True,\n        encoding=encoding,\n    ).dict()\n</code></pre>"},{"location":"reference/#dotenv.find_dotenv","title":"<code>find_dotenv(filename='.env', raise_error_if_not_found=False, usecwd=False)</code>","text":"<p>Search in increasingly higher folders for the given file</p> <p>Returns path to the file if found, or an empty string otherwise</p> Source code in <code>src/dotenv/main.py</code> <pre><code>def find_dotenv(\n    filename: str = \".env\",\n    raise_error_if_not_found: bool = False,\n    usecwd: bool = False,\n) -&gt; str:\n    \"\"\"\n    Search in increasingly higher folders for the given file\n\n    Returns path to the file if found, or an empty string otherwise\n    \"\"\"\n\n    def _is_interactive():\n        \"\"\"Decide whether this is running in a REPL or IPython notebook\"\"\"\n        if hasattr(sys, \"ps1\") or hasattr(sys, \"ps2\"):\n            return True\n        try:\n            main = __import__(\"__main__\", None, None, fromlist=[\"__file__\"])\n        except ModuleNotFoundError:\n            return False\n        return not hasattr(main, \"__file__\")\n\n    def _is_debugger():\n        return sys.gettrace() is not None\n\n    if usecwd or _is_interactive() or _is_debugger() or getattr(sys, \"frozen\", False):\n        # Should work without __file__, e.g. in REPL or IPython notebook.\n        path = os.getcwd()\n    else:\n        # will work for .py files\n        frame = sys._getframe()\n        current_file = __file__\n\n        while frame.f_code.co_filename == current_file or not os.path.exists(\n            frame.f_code.co_filename\n        ):\n            assert frame.f_back is not None\n            frame = frame.f_back\n        frame_filename = frame.f_code.co_filename\n        path = os.path.dirname(os.path.abspath(frame_filename))\n\n    for dirname in _walk_to_root(path):\n        check_path = os.path.join(dirname, filename)\n        if os.path.isfile(check_path):\n            return check_path\n\n    if raise_error_if_not_found:\n        raise IOError(\"File not found\")\n\n    return \"\"\n</code></pre>"},{"location":"reference/#dotenv.get_cli_string","title":"<code>get_cli_string(path=None, action=None, key=None, value=None, quote=None)</code>","text":"<p>Returns a string suitable for running as a shell script.</p> <p>Useful for converting a arguments passed to a fabric task to be passed to a <code>local</code> or <code>run</code> command.</p> Source code in <code>src/dotenv/__init__.py</code> <pre><code>def get_cli_string(\n    path: Optional[str] = None,\n    action: Optional[str] = None,\n    key: Optional[str] = None,\n    value: Optional[str] = None,\n    quote: Optional[str] = None,\n):\n    \"\"\"Returns a string suitable for running as a shell script.\n\n    Useful for converting a arguments passed to a fabric task\n    to be passed to a `local` or `run` command.\n    \"\"\"\n    command = [\"dotenv\"]\n    if quote:\n        command.append(f\"-q {quote}\")\n    if path:\n        command.append(f\"-f {path}\")\n    if action:\n        command.append(action)\n        if key:\n            command.append(key)\n            if value:\n                if \" \" in value:\n                    command.append(f'\"{value}\"')\n                else:\n                    command.append(value)\n\n    return \" \".join(command).strip()\n</code></pre>"},{"location":"reference/#dotenv.get_key","title":"<code>get_key(dotenv_path, key_to_get, encoding='utf-8')</code>","text":"<p>Get the value of a given key from the given .env.</p> <p>Returns <code>None</code> if the key isn't found or doesn't have a value.</p> Source code in <code>src/dotenv/main.py</code> <pre><code>def get_key(\n    dotenv_path: StrPath,\n    key_to_get: str,\n    encoding: Optional[str] = \"utf-8\",\n) -&gt; Optional[str]:\n    \"\"\"\n    Get the value of a given key from the given .env.\n\n    Returns `None` if the key isn't found or doesn't have a value.\n    \"\"\"\n    return DotEnv(dotenv_path, verbose=True, encoding=encoding).get(key_to_get)\n</code></pre>"},{"location":"reference/#dotenv.load_dotenv","title":"<code>load_dotenv(dotenv_path=None, stream=None, verbose=False, override=False, interpolate=True, encoding='utf-8')</code>","text":"<p>Parse a .env file and then load all the variables found as environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>dotenv_path</code> <code>Optional[StrPath]</code> <p>Absolute or relative path to .env file.</p> <code>None</code> <code>stream</code> <code>Optional[IO[str]]</code> <p>Text stream (such as <code>io.StringIO</code>) with .env content, used if <code>dotenv_path</code> is <code>None</code>.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Whether to output a warning the .env file is missing.</p> <code>False</code> <code>override</code> <code>bool</code> <p>Whether to override the system environment variables with the variables from the <code>.env</code> file.</p> <code>False</code> <code>encoding</code> <code>Optional[str]</code> <p>Encoding to be used to read the file.</p> <code>'utf-8'</code> <p>Returns:     Bool: True if at least one environment variable is set else False</p> <p>If both <code>dotenv_path</code> and <code>stream</code> are <code>None</code>, <code>find_dotenv()</code> is used to find the .env file with it's default parameters. If you need to change the default parameters of <code>find_dotenv()</code>, you can explicitly call <code>find_dotenv()</code> and pass the result to this function as <code>dotenv_path</code>.</p> <p>If the environment variable <code>PYTHON_DOTENV_DISABLED</code> is set to a truthy value, .env loading is disabled.</p> Source code in <code>src/dotenv/main.py</code> <pre><code>def load_dotenv(\n    dotenv_path: Optional[StrPath] = None,\n    stream: Optional[IO[str]] = None,\n    verbose: bool = False,\n    override: bool = False,\n    interpolate: bool = True,\n    encoding: Optional[str] = \"utf-8\",\n) -&gt; bool:\n    \"\"\"Parse a .env file and then load all the variables found as environment variables.\n\n    Parameters:\n        dotenv_path: Absolute or relative path to .env file.\n        stream: Text stream (such as `io.StringIO`) with .env content, used if\n            `dotenv_path` is `None`.\n        verbose: Whether to output a warning the .env file is missing.\n        override: Whether to override the system environment variables with the variables\n            from the `.env` file.\n        encoding: Encoding to be used to read the file.\n    Returns:\n        Bool: True if at least one environment variable is set else False\n\n    If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the\n    .env file with it's default parameters. If you need to change the default parameters\n    of `find_dotenv()`, you can explicitly call `find_dotenv()` and pass the result\n    to this function as `dotenv_path`.\n\n    If the environment variable `PYTHON_DOTENV_DISABLED` is set to a truthy value,\n    .env loading is disabled.\n    \"\"\"\n    if _load_dotenv_disabled():\n        logger.debug(\n            \"python-dotenv: .env loading disabled by PYTHON_DOTENV_DISABLED environment variable\"\n        )\n        return False\n\n    if dotenv_path is None and stream is None:\n        dotenv_path = find_dotenv()\n\n    dotenv = DotEnv(\n        dotenv_path=dotenv_path,\n        stream=stream,\n        verbose=verbose,\n        interpolate=interpolate,\n        override=override,\n        encoding=encoding,\n    )\n    return dotenv.set_as_environment_variables()\n</code></pre>"},{"location":"reference/#dotenv.set_key","title":"<code>set_key(dotenv_path, key_to_set, value_to_set, quote_mode='always', export=False, encoding='utf-8')</code>","text":"<p>Adds or Updates a key/value to the given .env</p> <p>If the .env path given doesn't exist, fails instead of risking creating an orphan .env somewhere in the filesystem</p> Source code in <code>src/dotenv/main.py</code> <pre><code>def set_key(\n    dotenv_path: StrPath,\n    key_to_set: str,\n    value_to_set: str,\n    quote_mode: str = \"always\",\n    export: bool = False,\n    encoding: Optional[str] = \"utf-8\",\n) -&gt; Tuple[Optional[bool], str, str]:\n    \"\"\"\n    Adds or Updates a key/value to the given .env\n\n    If the .env path given doesn't exist, fails instead of risking creating\n    an orphan .env somewhere in the filesystem\n    \"\"\"\n    if quote_mode not in (\"always\", \"auto\", \"never\"):\n        raise ValueError(f\"Unknown quote_mode: {quote_mode}\")\n\n    quote = quote_mode == \"always\" or (\n        quote_mode == \"auto\" and not value_to_set.isalnum()\n    )\n\n    if quote:\n        value_out = \"'{}'\".format(value_to_set.replace(\"'\", \"\\\\'\"))\n    else:\n        value_out = value_to_set\n    if export:\n        line_out = f\"export {key_to_set}={value_out}\\n\"\n    else:\n        line_out = f\"{key_to_set}={value_out}\\n\"\n\n    with rewrite(dotenv_path, encoding=encoding) as (source, dest):\n        replaced = False\n        missing_newline = False\n        for mapping in with_warn_for_invalid_lines(parse_stream(source)):\n            if mapping.key == key_to_set:\n                dest.write(line_out)\n                replaced = True\n            else:\n                dest.write(mapping.original.string)\n                missing_newline = not mapping.original.string.endswith(\"\\n\")\n        if not replaced:\n            if missing_newline:\n                dest.write(\"\\n\")\n            dest.write(line_out)\n\n    return True, key_to_set, value_to_set\n</code></pre>"},{"location":"reference/#dotenv.unset_key","title":"<code>unset_key(dotenv_path, key_to_unset, quote_mode='always', encoding='utf-8')</code>","text":"<p>Removes a given key from the given <code>.env</code> file.</p> <p>If the .env path given doesn't exist, fails. If the given key doesn't exist in the .env, fails.</p> Source code in <code>src/dotenv/main.py</code> <pre><code>def unset_key(\n    dotenv_path: StrPath,\n    key_to_unset: str,\n    quote_mode: str = \"always\",\n    encoding: Optional[str] = \"utf-8\",\n) -&gt; Tuple[Optional[bool], str]:\n    \"\"\"\n    Removes a given key from the given `.env` file.\n\n    If the .env path given doesn't exist, fails.\n    If the given key doesn't exist in the .env, fails.\n    \"\"\"\n    if not os.path.exists(dotenv_path):\n        logger.warning(\"Can't delete from %s - it doesn't exist.\", dotenv_path)\n        return None, key_to_unset\n\n    removed = False\n    with rewrite(dotenv_path, encoding=encoding) as (source, dest):\n        for mapping in with_warn_for_invalid_lines(parse_stream(source)):\n            if mapping.key == key_to_unset:\n                removed = True\n            else:\n                dest.write(mapping.original.string)\n\n    if not removed:\n        logger.warning(\n            \"Key %s not removed from %s - key doesn't exist.\", key_to_unset, dotenv_path\n        )\n        return None, key_to_unset\n\n    return removed, key_to_unset\n</code></pre>"}]}